diff --git a/git-stash.sh b/git-stash.sh
index 94793c1..6843359 100755
--- a/git-stash.sh
+++ b/git-stash.sh
@@ -691,7 +691,11 @@ do
 	esac
 done
 
-test -n "$seen_non_option" || set "push" "$@"
+if test -z "$seen_non_option"
+then
+	say "$(gettext "Anonymous stash prohibited")"
+	exit 1
+fi
 
 # Main command set
 case "$1" in
@@ -740,13 +744,6 @@ branch)
 	apply_to_branch "$@"
 	;;
 *)
-	case $# in
-	0)
-		push_stash &&
-		say "$(gettext "(To restore them type \"git stash apply\")")"
-		;;
-	*)
-		usage
-	esac
+	usage
 	;;
 esac
diff --git a/t/t3903-stash.sh b/t/t3903-stash.sh
index 6450bc6..3fb72ba 100755
--- a/t/t3903-stash.sh
+++ b/t/t3903-stash.sh
@@ -18,7 +18,7 @@ test_expect_success 'stash some dirty working directory' '
 	git add file &&
 	echo 3 > file &&
 	test_tick &&
-	git stash &&
+	git stash push &&
 	git diff-files --quiet &&
 	git diff-index --cached --quiet HEAD
 '
@@ -101,7 +101,7 @@ test_expect_success 'drop top stash' '
 	git reset --hard &&
 	git stash list > stashlist1 &&
 	echo 7 > file &&
-	git stash &&
+	git stash push &&
 	git stash drop &&
 	git stash list > stashlist2 &&
 	test_cmp stashlist1 stashlist2 &&
@@ -114,9 +114,9 @@ test_expect_success 'drop top stash' '
 test_expect_success 'drop middle stash' '
 	git reset --hard &&
 	echo 8 > file &&
-	git stash &&
+	git stash push &&
 	echo 9 > file &&
-	git stash &&
+	git stash push &&
 	git stash drop stash@{1} &&
 	test 2 = $(git stash list | wc -l) &&
 	git stash apply &&
@@ -134,9 +134,9 @@ test_expect_success 'drop middle stash' '
 test_expect_success 'drop middle stash by index' '
 	git reset --hard &&
 	echo 8 >file &&
-	git stash &&
+	git stash push &&
 	echo 9 >file &&
-	git stash &&
+	git stash push &&
 	git stash drop 1 &&
 	test 2 = $(git stash list | wc -l) &&
 	git stash apply &&
@@ -203,7 +203,7 @@ test_expect_success 'stash branch' '
 	echo bar > file &&
 	echo bar2 > file2 &&
 	git add file2 &&
-	git stash &&
+	git stash push &&
 	echo baz > file &&
 	git commit file -m second &&
 	git stash branch stashbranch &&
@@ -222,7 +222,7 @@ test_expect_success 'stash branch' '
 
 test_expect_success 'apply -q is quiet' '
 	echo foo > file &&
-	git stash &&
+	git stash push &&
 	git stash apply -q > output.out 2>&1 &&
 	test_must_be_empty output.out
 '
@@ -247,7 +247,7 @@ test_expect_success 'pop -q --index works and is quiet' '
 '
 
 test_expect_success 'drop -q is quiet' '
-	git stash &&
+	git stash push &&
 	git stash drop -q > output.out 2>&1 &&
 	test_must_be_empty output.out
 '
@@ -256,7 +256,7 @@ test_expect_success 'stash -k' '
 	echo bar3 > file &&
 	echo bar4 > file2 &&
 	git add file2 &&
-	git stash -k &&
+	git stash push -k &&
 	test bar,bar4 = $(cat file),$(cat file2)
 '
 
@@ -264,7 +264,7 @@ test_expect_success 'stash --no-keep-index' '
 	echo bar33 > file &&
 	echo bar44 > file2 &&
 	git add file2 &&
-	git stash --no-keep-index &&
+	git stash push --no-keep-index &&
 	test bar,bar2 = $(cat file),$(cat file2)
 '
 
@@ -272,7 +272,7 @@ test_expect_success 'stash --invalid-option' '
 	echo bar5 > file &&
 	echo bar6 > file2 &&
 	git add file2 &&
-	test_must_fail git stash --invalid-option &&
+	test_must_fail git stash push --invalid-option &&
 	test_must_fail git stash save --invalid-option &&
 	test bar5,bar6 = $(cat file),$(cat file2)
 '
@@ -469,7 +469,7 @@ test_expect_success 'stash branch - stashes on stack, stash-like argument' '
 	test_when_finished "git reset --hard HEAD" &&
 	git reset --hard &&
 	echo foo >> file &&
-	git stash &&
+	git stash push &&
 	test_when_finished "git stash drop" &&
 	echo bar >> file &&
 	STASH_ID=$(git stash create) &&
@@ -484,7 +484,7 @@ test_expect_success 'stash show format defaults to --stat' '
 	test_when_finished "git reset --hard HEAD" &&
 	git reset --hard &&
 	echo foo >> file &&
-	git stash &&
+	git stash push &&
 	test_when_finished "git stash drop" &&
 	echo bar >> file &&
 	STASH_ID=$(git stash create) &&
@@ -502,7 +502,7 @@ test_expect_success 'stash show - stashes on stack, stash-like argument' '
 	test_when_finished "git reset --hard HEAD" &&
 	git reset --hard &&
 	echo foo >> file &&
-	git stash &&
+	git stash push &&
 	test_when_finished "git stash drop" &&
 	echo bar >> file &&
 	STASH_ID=$(git stash create) &&
@@ -517,7 +517,7 @@ test_expect_success 'stash show -p - stashes on stack, stash-like argument' '
 	test_when_finished "git reset --hard HEAD" &&
 	git reset --hard &&
 	echo foo >> file &&
-	git stash &&
+	git stash push &&
 	test_when_finished "git stash drop" &&
 	echo bar >> file &&
 	STASH_ID=$(git stash create) &&
@@ -572,9 +572,9 @@ test_expect_success 'stash drop - fail early if specified stash is not a stash r
 	test_when_finished "git reset --hard HEAD && git stash clear" &&
 	git reset --hard &&
 	echo foo > file &&
-	git stash &&
+	git stash push &&
 	echo bar > file &&
-	git stash &&
+	git stash push &&
 	test_must_fail git stash drop $(git rev-parse stash@{0}) &&
 	git stash pop &&
 	test bar = "$(cat file)" &&
@@ -586,9 +586,9 @@ test_expect_success 'stash pop - fail early if specified stash is not a stash re
 	test_when_finished "git reset --hard HEAD && git stash clear" &&
 	git reset --hard &&
 	echo foo > file &&
-	git stash &&
+	git stash push &&
 	echo bar > file &&
-	git stash &&
+	git stash push &&
 	test_must_fail git stash pop $(git rev-parse stash@{0}) &&
 	git stash pop &&
 	test bar = "$(cat file)" &&
@@ -600,7 +600,7 @@ test_expect_success 'ref with non-existent reflog' '
 	echo bar5 > file &&
 	echo bar6 > file2 &&
 	git add file2 &&
-	git stash &&
+	git stash push &&
 	test_must_fail git rev-parse --quiet --verify does-not-exist &&
 	test_must_fail git stash drop does-not-exist &&
 	test_must_fail git stash drop does-not-exist@{0} &&
@@ -621,7 +621,7 @@ test_expect_success 'invalid ref of the form stash@{n}, n >= N' '
 	echo bar5 > file &&
 	echo bar6 > file2 &&
 	git add file2 &&
-	git stash &&
+	git stash push &&
 	test_must_fail git stash drop stash@{1} &&
 	test_must_fail git stash pop stash@{1} &&
 	test_must_fail git stash apply stash@{1} &&
@@ -636,7 +636,7 @@ test_expect_success 'invalid ref of the form "n", n >= N' '
 	echo bar5 >file &&
 	echo bar6 >file2 &&
 	git add file2 &&
-	git stash &&
+	git stash push &&
 	test_must_fail git stash drop 1 &&
 	test_must_fail git stash pop 1 &&
 	test_must_fail git stash apply 1 &&
@@ -651,7 +651,7 @@ test_expect_success 'stash branch should not drop the stash if the branch exists
 	git add file &&
 	git commit -m initial &&
 	echo bar >file &&
-	git stash &&
+	git stash push &&
 	test_must_fail git stash branch master stash@{0} &&
 	git rev-parse stash@{0} --
 '
@@ -663,7 +663,7 @@ test_expect_success 'stash branch should not drop the stash if the apply fails'
 	git add file &&
 	git commit -m initial &&
 	echo bar >file &&
-	git stash &&
+	git stash push &&
 	echo baz >file &&
 	test_when_finished "git checkout master" &&
 	test_must_fail git stash branch new_branch stash@{0} &&
@@ -681,7 +681,7 @@ test_expect_success 'stash apply shows status same as git status (relative to cu
 		echo x >subfile1 &&
 		echo x >../file &&
 		git status >../expect &&
-		git stash &&
+		git stash push &&
 		sane_unset GIT_MERGE_VERBOSITY &&
 		git stash apply
 	) |
@@ -705,7 +705,7 @@ test_expect_success 'stash where working directory contains "HEAD" file' '
 	echo file-not-a-ref > HEAD &&
 	git add HEAD &&
 	test_tick &&
-	git stash &&
+	git stash push &&
 	git diff-files --quiet &&
 	git diff-index --cached --quiet HEAD &&
 	test "$(git rev-parse stash^)" = "$(git rev-parse HEAD)" &&
@@ -735,11 +735,11 @@ test_expect_success 'store updates stash ref and reflog' '
 test_expect_success 'handle stash specification with spaces' '
 	git stash clear &&
 	echo pig >file &&
-	git stash &&
+	git stash push &&
 	stamp=$(git log -g --format="%cd" -1 refs/stash) &&
 	test_tick &&
 	echo cow >file &&
-	git stash &&
+	git stash push &&
 	git stash apply "stash@{$stamp}" &&
 	grep pig file
 '
@@ -750,7 +750,7 @@ test_expect_success 'setup stash with index and worktree changes' '
 	echo index >file &&
 	git add file &&
 	echo working >file &&
-	git stash
+	git stash push
 '
 
 test_expect_success 'stash list implies --first-parent -m' '
@@ -789,7 +789,7 @@ test_expect_success 'stash list --cc shows combined diff' '
 test_expect_success 'stash is not confused by partial renames' '
 	mv file renamed &&
 	git add renamed &&
-	git stash &&
+	git stash push &&
 	git stash apply &&
 	test_path_is_file renamed &&
 	test_path_is_missing file
@@ -1040,7 +1040,7 @@ test_expect_success 'stash without verb with pathspec' '
 	>foo &&
 	>bar &&
 	git add foo* &&
-	git stash -- "foo b*" &&
+	git stash push -- "foo b*" &&
 	test_path_is_missing "foo bar" &&
 	test_path_is_file foo &&
 	test_path_is_file bar &&
@@ -1058,7 +1058,7 @@ test_expect_success 'stash -k -- <pathspec> leaves unstaged files intact' '
 	git commit -m "test" &&
 	echo "foo" >foo &&
 	echo "bar" >bar &&
-	git stash -k -- foo &&
+	git stash push -k -- foo &&
 	test "",bar = $(cat foo),$(cat bar) &&
 	git stash pop &&
 	test foo,bar = $(cat foo),$(cat bar)
@@ -1070,7 +1070,7 @@ test_expect_success 'stash -- <subdir> leaves untracked files in subdir intact'
 	>subdir/tracked1 &&
 	>subdir/tracked2 &&
 	git add subdir/tracked* &&
-	git stash -- subdir/ &&
+	git stash push -- subdir/ &&
 	test_path_is_missing subdir/tracked1 &&
 	test_path_is_missing subdir/tracked2 &&
 	test_path_is_file subdir/untracked &&
@@ -1086,7 +1086,7 @@ test_expect_success 'stash -- <subdir> works with binary files' '
 	>subdir/tracked &&
 	cp "$TEST_DIRECTORY"/test-binary-1.png subdir/tracked-binary &&
 	git add subdir/tracked* &&
-	git stash -- subdir/ &&
+	git stash push -- subdir/ &&
 	test_path_is_missing subdir/tracked &&
 	test_path_is_missing subdir/tracked-binary &&
 	test_path_is_file subdir/untracked &&
diff --git a/t/t3905-stash-include-untracked.sh b/t/t3905-stash-include-untracked.sh
index 597b063..1808f41 100755
--- a/t/t3905-stash-include-untracked.sh
+++ b/t/t3905-stash-include-untracked.sh
@@ -20,7 +20,7 @@ test_expect_success 'stash save --include-untracked some dirty working directory
 	echo 1 > HEAD &&
 	mkdir untracked &&
 	echo untracked >untracked/untracked &&
-	git stash --include-untracked &&
+	git stash push --include-untracked &&
 	git diff-files --quiet &&
 	git diff-index --cached --quiet HEAD
 '
@@ -76,11 +76,11 @@ test_expect_success 'stash save --include-untracked stashed the untracked files'
 	test_cmp expect.lstree actual
 '
 test_expect_success 'stash save --patch --include-untracked fails' '
-	test_must_fail git stash --patch --include-untracked
+	test_must_fail git stash push --patch --include-untracked
 '
 
 test_expect_success 'stash save --patch --all fails' '
-	test_must_fail git stash --patch --all
+	test_must_fail git stash push --patch --all
 '
 
 git clean --force --quiet
@@ -108,7 +108,7 @@ test_expect_success 'stash save -u dirty index' '
 	echo 4 > file3 &&
 	git add file3 &&
 	test_tick &&
-	git stash -u
+	git stash push -u
 '
 
 blob=$(git rev-parse --short $(echo 4 | git hash-object --stdin))
@@ -162,7 +162,7 @@ test_expect_success 'stash save --include-untracked respects .gitignore' '
 	echo ignored > ignored &&
 	mkdir ignored.d &&
 	echo ignored >ignored.d/untracked &&
-	git stash -u &&
+	git stash push -u &&
 	test -s ignored &&
 	test -s ignored.d/untracked &&
 	test -s .gitignore
@@ -170,12 +170,12 @@ test_expect_success 'stash save --include-untracked respects .gitignore' '
 
 test_expect_success 'stash save -u can stash with only untracked files different' '
 	echo 4 > file4 &&
-	git stash -u &&
+	git stash push -u &&
 	test_path_is_missing file4
 '
 
 test_expect_success 'stash save --all does not respect .gitignore' '
-	git stash -a &&
+	git stash push -a &&
 	test_path_is_missing ignored &&
 	test_path_is_missing ignored.d &&
 	test_path_is_missing .gitignore
diff --git a/t/t3906-stash-submodule.sh b/t/t3906-stash-submodule.sh
index d7219d6..eb66beb 100755
--- a/t/t3906-stash-submodule.sh
+++ b/t/t3906-stash-submodule.sh
@@ -9,7 +9,7 @@ git_stash () {
 	git status -su >expect &&
 	ls -1pR * >>expect &&
 	git read-tree -u -m "$1" &&
-	git stash &&
+	git stash push &&
 	git status -su >actual &&
 	ls -1pR * >>actual &&
 	test_cmp expect actual &&
diff --git a/t/t7402-submodule-rebase.sh b/t/t7402-submodule-rebase.sh
index 8e32f19..371dc86 100755
--- a/t/t7402-submodule-rebase.sh
+++ b/t/t7402-submodule-rebase.sh
@@ -80,7 +80,7 @@ test_expect_success 'stash with a dirty submodule' '
 
 	echo new > file &&
 	CURRENT=$(cd submodule && git rev-parse HEAD) &&
-	git stash &&
+	git stash push &&
 	test new != $(cat file) &&
 	test submodule = $(git diff --name-only) &&
 	test $CURRENT = $(cd submodule && git rev-parse HEAD) &&
diff --git a/t/t7508-status.sh b/t/t7508-status.sh
index e1f1129..580361d 100755
--- a/t/t7508-status.sh
+++ b/t/t7508-status.sh
@@ -1612,7 +1612,7 @@ test_expect_success 'show stash info with "--show-stash"' '
 	git stash clear &&
 	echo 1 >file &&
 	git add file &&
-	git stash &&
+	git stash push &&
 	git status >expected_default &&
 	git status --show-stash >expected_with_stash &&
 	test_i18ngrep "^Your stash currently has 1 entry$" expected_with_stash
diff --git a/t/t7610-mergetool.sh b/t/t7610-mergetool.sh
index a9fb971..8b5c550 100755
--- a/t/t7610-mergetool.sh
+++ b/t/t7610-mergetool.sh
@@ -272,7 +272,7 @@ test_expect_success 'conflicted stash sets up rerere'  '
 	test_config rerere.enabled true &&
 	git checkout stash1 &&
 	echo "Conflicting stash content" >file11 &&
-	git stash &&
+	git stash push &&
 
 	git checkout --detach stash2 &&
 	test_must_fail git stash apply &&
diff --git a/t/t9903-bash-prompt.sh b/t/t9903-bash-prompt.sh
index 81a5179..1f0384e 100755
--- a/t/t9903-bash-prompt.sh
+++ b/t/t9903-bash-prompt.sh
@@ -377,7 +377,7 @@ test_expect_success 'prompt - stash status indicator - no stash' '
 test_expect_success 'prompt - stash status indicator - stash' '
 	printf " (master $)" >expected &&
 	echo 2 >file &&
-	git stash &&
+	git stash push &&
 	test_when_finished "git stash drop" &&
 	git pack-refs --all &&
 	(
@@ -390,7 +390,7 @@ test_expect_success 'prompt - stash status indicator - stash' '
 test_expect_success 'prompt - stash status indicator - not shown inside .git directory' '
 	printf " (GIT_DIR!)" >expected &&
 	echo 2 >file &&
-	git stash &&
+	git stash push &&
 	test_when_finished "git stash drop" &&
 	(
 		GIT_PS1_SHOWSTASHSTATE=y &&
@@ -614,7 +614,7 @@ test_expect_success 'prompt - bash color pc mode - inside .git directory' '
 test_expect_success 'prompt - bash color pc mode - stash status indicator' '
 	printf "BEFORE: (${c_green}\${__git_ps1_branch_name}${c_clear} ${c_lblue}\$${c_clear}):AFTER\\nmaster" >expected &&
 	echo 2 >file &&
-	git stash &&
+	git stash push &&
 	test_when_finished "git stash drop" &&
 	(
 		GIT_PS1_SHOWSTASHSTATE=y &&
